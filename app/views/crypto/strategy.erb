<% n = (params[:n].try(:to_i) || 10) %>
<% proposed = Hash[Strategy.proposed(n: n)] %>
<% actual = Hash[JSON.parse(Iconomi.get('/v1/strategies/DECENTCOOP/structure'))['values'].map { |h| [h['assetTicker'], h['targetWeight']] }] %>
<% rebalanced = Hash[JSON.parse(Iconomi.get('/v1/strategies/DECENTCOOP/structure'))['values'].map { |h| [h['assetTicker'], h['rebalancedWeight']] }] %>
<% diff = Hash[actual.map { |k,v| [k, actual[k] - rebalanced[k]] }] %>
<% strategy_live = JSON.parse(Iconomi.get('/v1/strategies/DECENTCOOP/structure')) %>
<% strategy = Strategy.find_by(ticker: 'DECENTCOOP') %>
<% y = 50000 %>


<p class="lead text-center">
  Rebalanced <%= timeago Time.at(strategy_live['lastRebalanced']) %>
  <a href="/strategy/<%=ENV['SITE_SECRET']%>/rebalance">
    <i class="fas fa-sync"></i>
  </a>
  <% Delayed::Job.where(handler: /method_name: :rebalance/).each { |delayed_job| %>
  &middot; Rebalancing in <abbr data-toggle="tooltip" title="<%=delayed_job.run_at%>"><%=time_ago_in_words delayed_job.run_at %></abbr>
  <% } %>
</p>

<table class="table mt-3" style="width: auto; margin: auto">
  <thead style="border-top: none">
    <tr>
      <th>SFW</th>
      <th>S</th>
      <th>24h</th>
      <th>7d</th>
      <th>1M</th>
      <th>3M</th>
      <th>6M</th>
      <th>1Y</th>
    </tr>
  </thead>
  <tr>
    <td style="text-align: center">
      <%
      i = Strategy.active_mature.order('score_fee_weighted desc').pluck(:ticker).index('DECENTCOOP') + 1
      offset = Strategy.active_mature.pluck(:score_fee_weighted).min.abs
      max_score = Strategy.active_mature.pluck(:score_fee_weighted).max
      score = 100*((strategy.score_fee_weighted + offset)/(max_score + offset))
      %>
      <%= number_with_precision score, precision: 1 %>
      <br />
      <small>
        <%= i %>/<%=Strategy.active_mature.count%>
      </small>
    </td>
    <td style="text-align: center">
      <%
      i = Strategy.active_mature.order('score desc').pluck(:ticker).index('DECENTCOOP') + 1
      offset = Strategy.active_mature.pluck(:score).min.abs
      max_score = Strategy.active_mature.pluck(:score).max
      score = 100*((strategy.score + offset)/(max_score + offset))
      %>
      <%= number_with_precision score, precision: 1 %>
      <br />
      <small>
        <%= i %>/<%=Strategy.active_mature.count%>
      </small>
    </td>
    <% %w[day week month three_month six_month year].each { |t| %>
    <td style="text-align: center">
      <% if (x = strategy.send(t)) %>
        <%
        i = Strategy.active_mature.order("#{t} desc").pluck(:ticker).index('DECENTCOOP') + 1
        offset = Strategy.active_mature.pluck(t).compact.min.abs
        max_score = Strategy.active_mature.pluck(t).compact.max
        score = 100*((strategy.send(t) + offset)/(max_score + offset))
        %>
        <%= number_with_precision score, precision: 1 %>
        <br />
        <small>
          <%= i %>/<%=Strategy.active_mature.count%>
        </small>
      <% end %>
    </td>
    <% } %>
  </tr>
</table>


<style>
  @media(min-width: 768px) {
  td.assetName { width: 1px;  padding-left: 0; padding-right: 0;}
  td.actual { width: 1px;  }
  #assets th { border-top: none }
  }
</style>
<table id="assets" class="table" style="width: auto; margin: auto">
  <thead>
    <tr>
      <th></th>
      <th>Asset</th>
      <th></th>
      <th>Current weight</th>
      <th>Proposed weight</th>
    </tr>
  </thead>
  <% (proposed.keys + actual.keys + Asset.where(:multiplier.ne => nil).order('multiplier desc').pluck(:ticker)).uniq.each { |k| %>
  <% asset = Asset.find_by(ticker: k) %>
  <% coin = Coin.find_by(symbol: k.downcase) %>
  <tr>
    <td style="vertical-align: middle; text-align: right; width: 10vw">
      <% if actual[k] %>
        <% if diff[k] < 0 %>
          <div class="d-none d-sm-inline-block" style="position:relative; top: 0.2rem; height: 1rem; background: <%= if diff[k] > 0; 'green'; elsif diff[k] < 0; 'red'; end %>; width: <%="#{100*-diff[k]/diff.values.map(&:abs).max}%"%>"></div>
        <% end %>
      <% end %>
    </td>
    <td class="assetName" style="white-space: nowrap;">
      <a target="_blank" href="https://www.iconomi.com/asset/<%=k%>">
        <%= asset.name %> (<%= k %>)
      </a>
      <% if coin %>
        <a target="_blank" href="https://coingecko.com/en/coins/<%=coin.slug%>">
          <i data-toggle="tooltip" title="Coingecko" class="fas fa-chevron-right"></i>
        </a>
      <% end %>
      <div style="display: inline" data-pagelet-url="/assets/<%=asset.id%>/multiplier"></div>
    </td>
    <td style="vertical-align: middle; width: 10vw">
      <% if actual[k] %>
        <% if diff[k] > 0 %>
          <div class="d-none d-sm-inline-block" style="position:relative; top: 0.2rem; height: 1rem; background: <%= if diff[k] > 0; 'green'; elsif diff[k] < 0; 'red'; end %>; width: <%="#{100*diff[k]/diff.values.map(&:abs).max}%"%>"></div>
        <% end %>
      <% end %>
    </td>
    <td class="actual" style="white-space: nowrap;">
      <% if actual[k] %>
        <%= number_to_percentage (actual[k]*100), precision: 2 %>
        <small>
          <span style="color: <%= if diff[k] > 0; 'green'; elsif diff[k] < 0; 'red'; end %>">
            <%= '+' if diff[k] > 0 %><%=(diff[k]*10000).round%>
          </span>
        </small>
      <% end %>
    </td>
    <td>
      <% if proposed.keys.include?(k) %>
        <%= number_to_percentage (proposed[k]*100), precision: 2 %>
      <% end %>
    </td>
  </tr>
  <% } %>
</table>
